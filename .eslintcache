[{"C:\\Users\\Dash\\Desktop\\Projects\\robinhood\\src\\index.js":"1","C:\\Users\\Dash\\Desktop\\Projects\\robinhood\\src\\App.js":"2","C:\\Users\\Dash\\Desktop\\Projects\\robinhood\\src\\Header.js":"3","C:\\Users\\Dash\\Desktop\\Projects\\robinhood\\src\\Newsfeed.js":"4","C:\\Users\\Dash\\Desktop\\Projects\\robinhood\\src\\Article.js":"5","C:\\Users\\Dash\\Desktop\\Projects\\robinhood\\src\\LineGraph.js":"6","C:\\Users\\Dash\\Desktop\\Projects\\robinhood\\src\\TimeLine.js":"7","C:\\Users\\Dash\\Desktop\\Projects\\robinhood\\src\\Stats.js":"8","C:\\Users\\Dash\\Desktop\\Projects\\robinhood\\src\\StatsRow.js":"9","C:\\Users\\Dash\\Desktop\\Projects\\robinhood\\src\\api.js":"10","C:\\Users\\Dash\\Desktop\\Projects\\robinhood\\src\\firebase.js":"11","C:\\Users\\Dash\\Desktop\\Projects\\robinhood\\src\\Stock.js":"12","C:\\Users\\Dash\\Desktop\\Projects\\robinhood\\src\\Main.js":"13"},{"size":264,"mtime":1606880668312,"results":"14","hashOfConfig":"15"},{"size":1035,"mtime":1606886055569,"results":"16","hashOfConfig":"15"},{"size":754,"mtime":1606804214665,"results":"17","hashOfConfig":"15"},{"size":2953,"mtime":1606862878828,"results":"18","hashOfConfig":"15"},{"size":146,"mtime":1606796257415,"results":"19","hashOfConfig":"15"},{"size":2006,"mtime":1606804250440,"results":"20","hashOfConfig":"15"},{"size":720,"mtime":1606863822411,"results":"21","hashOfConfig":"15"},{"size":3141,"mtime":1606864992104,"results":"22","hashOfConfig":"15"},{"size":1787,"mtime":1606886160713,"results":"23","hashOfConfig":"15"},{"size":84,"mtime":1606796786541,"results":"24","hashOfConfig":"15"},{"size":524,"mtime":1606797199994,"results":"25","hashOfConfig":"15"},{"size":158,"mtime":1606880125546,"results":"26","hashOfConfig":"15"},{"size":253,"mtime":1606883661087,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"b06x5g",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\Dash\\Desktop\\Projects\\robinhood\\src\\index.js",[],["59","60"],"C:\\Users\\Dash\\Desktop\\Projects\\robinhood\\src\\App.js",[],"C:\\Users\\Dash\\Desktop\\Projects\\robinhood\\src\\Header.js",[],"C:\\Users\\Dash\\Desktop\\Projects\\robinhood\\src\\Newsfeed.js",["61","62","63","64","65"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./Newsfeed.css\";\r\nimport Article from \"./Article\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport FlashOnIcon from \"@material-ui/icons/FlashOn\";\r\nimport LineGraph from \"./LineGraph\";\r\nimport Chip from '@material-ui/core/Chip';\r\nimport TimeLine from './TimeLine'\r\n\r\n\r\nfunction Newsfeed() {\r\n  const [popularTopics, setTopics] = useState([\r\n    \"100 Most Popular\",\r\n    \"Top Movers\",\r\n    \"Upcoming Earnings\",\r\n    \"Crypto\",\r\n    \"Cannabis\",\r\n    \"Healthcare Supplies\",\r\n    \"Index ETFs\",\r\n    \"Technology\",\r\n    \"China\",\r\n    \"Pharma\",\r\n    \"Consumer Goods\",\r\n    \"Food & Drink\",\r\n    \"Energy & Water\",\r\n  ]);\r\n\r\n  const [seed, setSeed] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setSeed(Math.floor(Math.random() * 5000));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"newsfeed\">\r\n      <div className=\"newsfeed__container\">\r\n        <div className=\"newsfeed__chart__section\">\r\n          <div className=\"newsfeed_price_asset\">\r\n            <h1 className=\"price\"> $10,14,656.84</h1>\r\n            <div className=\"price__change\">\r\n            <div>\r\n            <span className=\"price__datas\"> $10542.90 (-0.12%)</span>\r\n            <span className=\"price__date\">Today</span>\r\n            </div>\r\n            <div>\r\n            <span className=\"price__datas\"> $4022.90 (+5.12%)</span>\r\n            <span className=\"price__date\">After hours</span>\r\n            </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"newsfeed__chart\">\r\n            <LineGraph />\r\n            <TimeLine />\r\n          </div>\r\n        </div>\r\n        <div className=\"newsfeed__buying__section\">\r\n          <h2> Buying Power</h2>\r\n          <h2> $14,034.11</h2>\r\n        </div>\r\n        <div className=\"newsfeed__market__section\">\r\n          <div className=\"newsfeed__market__box\">\r\n            <p> Markets Closed</p>\r\n            <h1> Happy Thanksgiving</h1>\r\n          </div>\r\n        </div>\r\n        <div className=\"newsfeed__popularlists__section\">\r\n          <div className=\"newsfeed__popularlists__intro\">\r\n            <span className=\"list__title\">Popular lists</span>\r\n            <p>Show More</p>\r\n          </div>\r\n          <div className=\"newsfeed_popularlists_badges\">\r\n            {popularTopics.map((topic) => (\r\n              <div className=\"category__list\">\r\n              <Chip \r\n                className=\"topic__badge\"\r\n                variant=\"outlined\"\r\n                label={topic}\r\n                avatar={<Avatar\r\n                  src={`https://avatars.dicebear.com/api/human/${topic}.svg`}\r\n                  outlined={topic}\r\n                />} \r\n              />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>Heeeloo\r\n          </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Newsfeed;","C:\\Users\\Dash\\Desktop\\Projects\\robinhood\\src\\Article.js",[],"C:\\Users\\Dash\\Desktop\\Projects\\robinhood\\src\\LineGraph.js",["66"],"import React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  hover: {\r\n    intersect: false\r\n  },\r\n  elements: {\r\n    line: {\r\n      tension: 0\r\n    },\r\n    point: {\r\n      radius: 5,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n        ticks: {\r\n          display: false,\r\n        }\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          display: false,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nfunction LineGraph({ casesType }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    \r\n    let data = [];\r\n    let value = 50;\r\n    let date = data.length + 3;\r\n    for(var i = 0; i < 366; i++){\r\n      let date = new Date();\r\n      date.setHours(9,30,10,20);\r\n      date.setDate(i);\r\n      value += Math.round(5 + Math.random() *(-5-5));\r\n      data.push({x: date, y: value});\r\n    }   \r\n    setData(data)\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                type: 'line',\r\n                backgroundColor: \"black\",\r\n                borderColor: \"#FF5000\",\r\n                borderWidth: 2,\r\n                pointBorderColor: 'rgba(0, 0, 0, 0)',\r\n                pointBackgroundColor: 'rgba(0, 0, 0, 0)',\r\n                pointHoverBackgroundColor: '#FF5000',\r\n                pointHoverBorderColor: '#000000',\r\n                pointHoverBorderWidth: 4,\r\n                pointHoverRadius: 6,\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","C:\\Users\\Dash\\Desktop\\Projects\\robinhood\\src\\TimeLine.js",[],"C:\\Users\\Dash\\Desktop\\Projects\\robinhood\\src\\Stats.js",["67","68","69"],"import React, { useState, useEffect } from \"react\";\r\nimport \"./Stats.css\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport StatsRow from \"./StatsRow\";\r\nimport { key } from \"./api\";\r\nimport axios from \"axios\";\r\nimport { db } from \"./firebase\";\r\n\r\nconst BASE_URL = \"https://finnhub.io/api/v1/quote?symbol=\";\r\nconst KEY_URL = `&token=${key}`;\r\n\r\n\r\nconst testData = []; \r\n\r\nfunction Stats() {\r\n  const [stocksData, setStocksData] = useState([]);\r\n  const [myStocks, setMyStocks] = useState([]);\r\n\r\n  const getMyStocks = () => {\r\n  db\r\n    .collection('myStocks')\r\n    .onSnapshot(snapshot => {\r\n      console.log(snapshot)\r\n        let promises = [];\r\n        let tempData = []\r\n        snapshot.docs.map((doc) => {\r\n          console.log(doc.data())\r\n          promises.push(getStocksData(doc.data().ticker)\r\n          .then(res => {\r\n            tempData.push({\r\n              id: doc.id,\r\n              data: doc.data(),\r\n              info: res.data\r\n            })\r\n          })\r\n        )})\r\n        Promise.all(promises).then(()=>{\r\n          setMyStocks(tempData);\r\n        })\r\n    })\r\n  }\r\n\r\n  const getStocksData = (stock) => {\r\n    return axios\r\n      .get(`${BASE_URL}${stock}${KEY_URL}`)\r\n      .catch((error) => {\r\n        console.error(\"Error\", error.message);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const stocksList = [\"AAPL\", \"MSFT\", \"TSLA\", \"FB\", \"BABA\", \"UBER\", \"DIS\", \"SBUX\",\"BE\",\"AMZN\",\"FCEL\",\"GE\",\"DIN\",\"RCL\",\"CCL\",\"NCLH\",\"F\",\"AAL\",\"NIO\",\"MRNA\",\"BAC\",\"BA\",\"AMD\",\"NFLX\",\"TWTR\",\"KO\",\"NVDA\",\"GM\"];\r\n\r\n    getMyStocks();\r\n    let promises = [];\r\n    stocksList.map((stock) => {\r\n      promises.push(\r\n        getStocksData(stock)\r\n        .then((res) => {\r\n          testData.push({\r\n            name: stock,\r\n            ...res.data\r\n          });\r\n        })\r\n      )\r\n    });\r\n\r\n    Promise.all(promises).then(()=>{\r\n      //console.log(testData);\r\n      setStocksData(testData);\r\n    })\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"stats\">\r\n      <div className=\"stats__container\">\r\n        <div className=\"stats__header\">\r\n          <p> Stocks</p>\r\n          <MoreHorizIcon />\r\n        </div>\r\n        <div className=\"stats__content\">\r\n          <div className=\"stats__rows\">\r\n            {myStocks.map((stock) => (\r\n              <StatsRow\r\n                key={stock.data.ticker}\r\n                name={stock.data.ticker}\r\n                openPrice={stock.info.o}\r\n                volume={stock.data.shares}\r\n                price={stock.info.c}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div className=\"stats__header stats-lists\">\r\n          <p>Lists</p>\r\n          <AddIcon/>\r\n        </div>\r\n        <div className=\"stats__content\">\r\n          <div className=\"stats__rows\">\r\n            {stocksData.map((stock) => (\r\n              <StatsRow\r\n                key={stock.name}\r\n                name={stock.name}\r\n                openPrice={stock.o}\r\n                price={stock.c}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Stats;","C:\\Users\\Dash\\Desktop\\Projects\\robinhood\\src\\StatsRow.js",["70"],"C:\\Users\\Dash\\Desktop\\Projects\\robinhood\\src\\api.js",["71"],"import axios from \"axios\";\r\n\r\nconst key = \"bv2ipb748v6ubfule9mg\";\r\n\r\nexport { key };","C:\\Users\\Dash\\Desktop\\Projects\\robinhood\\src\\firebase.js",[],"C:\\Users\\Dash\\Desktop\\Projects\\robinhood\\src\\Stock.js",[],"C:\\Users\\Dash\\Desktop\\Projects\\robinhood\\src\\Main.js",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":3,"column":8,"nodeType":"78","messageId":"79","endLine":3,"endColumn":15},{"ruleId":"76","severity":1,"message":"80","line":5,"column":8,"nodeType":"78","messageId":"79","endLine":5,"endColumn":21},{"ruleId":"76","severity":1,"message":"81","line":6,"column":8,"nodeType":"78","messageId":"79","endLine":6,"endColumn":19},{"ruleId":"76","severity":1,"message":"82","line":13,"column":25,"nodeType":"78","messageId":"79","endLine":13,"endColumn":34},{"ruleId":"76","severity":1,"message":"83","line":29,"column":10,"nodeType":"78","messageId":"79","endLine":29,"endColumn":14},{"ruleId":"76","severity":1,"message":"84","line":59,"column":9,"nodeType":"78","messageId":"79","endLine":59,"endColumn":13},{"ruleId":"85","severity":1,"message":"86","line":27,"column":33,"nodeType":"87","messageId":"88","endLine":27,"endColumn":35},{"ruleId":"85","severity":1,"message":"86","line":57,"column":28,"nodeType":"87","messageId":"88","endLine":57,"endColumn":30},{"ruleId":"89","severity":1,"message":"90","line":73,"column":6,"nodeType":"91","endLine":73,"endColumn":8,"suggestions":"92"},{"ruleId":"76","severity":1,"message":"93","line":3,"column":10,"nodeType":"78","messageId":"79","endLine":3,"endColumn":12},{"ruleId":"76","severity":1,"message":"94","line":1,"column":8,"nodeType":"78","messageId":"79","endLine":1,"endColumn":13},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"no-unused-vars","'Article' is defined but never used.","Identifier","unusedVar","'MoreHorizIcon' is defined but never used.","'FlashOnIcon' is defined but never used.","'setTopics' is assigned a value but never used.","'seed' is assigned a value but never used.","'date' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMyStocks'. Either include it or remove the dependency array.","ArrayExpression",["97"],"'db' is defined but never used.","'axios' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},"Update the dependencies array to be: [getMyStocks]",{"range":"100","text":"101"},[1983,1985],"[getMyStocks]"]